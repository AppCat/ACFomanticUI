@namespace ACUI.FomanticUI
@inherits ACContentComponentBase<TModel>
@typeparam TModel
@using Microsoft.AspNetCore.Components.Forms;
@using System.ComponentModel.DataAnnotations;
@using System.Reflection;
@using System.ComponentModel;

<EditForm class="@ClassMapper.Result"
          style="@StyleMapper.Result"
          id="@Id"
          @attributes="@Attributes"
          EditContext="@_editContext"
          OnValidSubmit="OnValidSubmit"
          OnInvalidSubmit="OnInvalidSubmit">
    <DataAnnotationsValidator />
    <CascadingValue Value="this" IsFixed="@true">
        @if (Auto)
        {
            @_auotField(Model);
        }
        @if (ChildContent != null)
        {
            @ChildContent(Model);
        }
    </CascadingValue>
    @if (!EnableFormMessage)
        return;
    @if (FormMessageTemplate != null)
    {
        @FormMessageTemplate(Model)
    }
    else
    {
        <FFormMessage Model="@Model" />
    }
</EditForm>


@code{
    private RenderFragment<TModel> _auotField => model => AutoControl<TModel>(model);

    /// <summary>
    /// 控件
    /// </summary>
    /// <typeparam name="TControl"></typeparam>
    /// <param name="control"></param>
    /// <returns></returns>
    private RenderFragment AutoControl<TControl>(TControl control)
    {
        var type = control.GetType();
        var properties = type.GetProperties();
        properties = properties.OrderByDescending(propertie =>
        {
            var order = propertie.GetCustomAttribute<DisplayAttribute>()?.GetOrder() ?? 0;
            return order;
        }).ToArray();
        return
    @<Template>
        @foreach (var propertie in properties)
        {
            if (!propertie.CanRead || !propertie.CanWrite)
                continue;
            var autoGenerateField = propertie.GetCustomAttribute<DisplayAttribute>()?.GetAutoGenerateField() ?? true;
            if (!autoGenerateField)
                continue;
            var value = propertie.GetValue(control);
            var name = propertie.GetCustomAttribute<DisplayAttribute>()?.GetName() ?? propertie.GetCustomAttribute<DisplayNameAttribute>()?.DisplayName ?? propertie.Name;
            var required = propertie.GetCustomAttributes(typeof(RequiredAttribute), true).Any();
            var readOnly = propertie.GetCustomAttribute<ReadOnlyAttribute>()?.IsReadOnly ?? false;
            var underlyingType = Nullable.GetUnderlyingType(propertie.PropertyType) ?? propertie.PropertyType;
            <CascadingValue Value="@name" IsFixed="@true" Name="FieldName">
                <FField Label="@name" Required="@required">
                    @if (underlyingType.IsEnum)
                    {
                        var names = underlyingType.GetEnumDisplayNames();
                        //Action<ACUI.FomanticUI.IFOverlayItem> setEnum = v => { propertie.SetValue(control, Enum.Parse(underlyingType, v?.Key)); };
                        Action<string[]> setEnum = keys =>
                        {
                            if(keys?.Any() ?? false)
                            {
                                propertie.SetValue(control, Enum.Parse(underlyingType, keys[0]));
                            }
                            else if(underlyingType != propertie.PropertyType)
                            {
                                propertie.SetValue(control, null);
                            }
                        };
                        <FDropdown Selection
                                   Clearable="@(underlyingType != propertie.PropertyType)"
                                   ReadOnly="@readOnly"
                                   SelectedKeys="@(new[] { value?.ToString() })"
                                   OnSelectedKeysChange="setEnum">
                            @foreach (var kv in names)
                            {
                                <FDropdownOption Key="@kv.Key" Value="@kv.Value" />
                            }
                        </FDropdown>
                        return;
                    }
                    @{
                        Action<object> setValue = v => propertie.SetValue(control, v);
                    }
                    <FTypeInput ReadOnly="@readOnly" ValueType="@propertie.PropertyType" Value="@value" ValueChanged="setValue" />
                </FField>
            </CascadingValue>
        }
    </Template>;
}
}